<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SoulBoard</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üå•Ô∏è</text></svg>">
    <style>
        /* All previous CSS remains unchanged */
        :root {
            --primary: #8B93FF;
            --secondary: #FFA1F5;
            --background: #FAF9F6;
            --text: #333;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', sans-serif;
        }

        body {
            background-color: var(--background);
            color: var(--text);
            line-height: 1.6;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            margin: 2rem 0;
            animation: fadeIn 1s ease-in;
        }

        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

        h1::before {
            content: "üå•Ô∏è ";
        }

        .tagline {
            color: #666;
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
        }

        .new-post {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin-bottom: 2rem;
        }

        textarea {
            width: 100%;
            padding: 1rem;
            border: 2px solid #eee;
            border-radius: 8px;
            resize: vertical;
            min-height: 120px;
            margin-bottom: 1.5rem;
            font-size: 1rem;
        }

        .search-bar {
            margin: 1rem 0;
            padding: 12px;
            width: 100%;
            border: 2px solid #eee;
            border-radius: 8px;
            font-size: 1rem;
        }

        .mood-selector {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 8px;
            margin-bottom: 1.5rem;
        }

        .mood-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 20px;
            background: #f0f0f0;
            cursor: pointer;
            transition: transform 0.2s, opacity 0.2s;
        }

        .mood-btn:hover {
            transform: scale(1.05);
        }

        .mood-btn:active {
            transform: scale(0.95);
        }

        .mood-btn.selected {
            background: var(--primary);
            color: white;
        }

        .post-btn {
            background: var(--primary);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            width: 100%;
            font-size: 1rem;
            transition: opacity 0.2s;
            position: relative;
        }

        .post-btn:hover {
            opacity: 0.9;
        }

        .post {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            animation: slideUp 0.5s ease-out;
            transition: box-shadow 0.3s, transform 0.2s;
            position: relative;
        }

        .post:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

        .post-date {
            color: #999;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .post-mood {
            font-size: 1.5rem;
            margin: 0.5rem 0;
        }

        .post-content {
            white-space: pre-wrap;
            margin: 0.5rem 0;
            line-height: 1.5;
        }

        .loader {
            width: 18px;
            height: 18px;
            border: 2px solid #fff;
            border-bottom-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            display: inline-block;
            vertical-align: middle;
        }

        #empty-state {
            text-align: center;
            color: #888;
            padding: 2rem;
            display: none;
        }

        .vault-access {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--primary);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 100;
        }

        .vault-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            z-index: 1000;
            max-width: 90%;
        }

        .vault-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .vault-tab-btn {
            background: none;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
        }

        .vault-tab-btn.active {
            background: var(--primary);
            color: white;
        }

        .vault-entry {
            background: var(--background);
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .post-menu {
            position: absolute;
            top: 1rem;
            right: 1rem;
            cursor: pointer;
            padding: 4px;
            border-radius: 50%;
            transition: background 0.2s;
        }

        .post-menu:hover {
            background: rgba(0,0,0,0.05);
        }

        .menu-options {
            position: absolute;
            top: 2rem;
            right: 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 0.5rem;
            z-index: 10;
            display: none;
        }

        .menu-option {
            padding: 0.5rem 1rem;
            white-space: nowrap;
            cursor: pointer;
            border-radius: 4px;
        }

        .menu-option:hover {
            background: var(--background);
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="vault-access" onclick="toggleVault()">üîí Vault</div>
    <div class="vault-modal" id="vaultModal">
        <div class="vault-tabs">
            <button class="vault-tab-btn active" onclick="showVaultSection('deleted')">Deleted (60d)</button>
            <button class="vault-tab-btn" onclick="showVaultSection('hidden')">Hidden</button>
        </div>
        <div id="vaultContent"></div>
    </div>

    <header>
        <h1>SoulBoard</h1>
        <p class="tagline">Where your soul speaks without judgment</p>
    </header>

    <div class="new-post">
        <textarea placeholder="What's on your mind today?"></textarea>
        <input type="text" class="search-bar" placeholder="Search entries... (date, mood, text)" id="searchInput">
        <div class="mood-selector">
            <button class="mood-btn">üòä Happy</button>
            <button class="mood-btn">üòê Meh</button>
            <button class="mood-btn">üò¢ Sad</button>
            <button class="mood-btn">üí° Inspired</button>
            <button class="mood-btn">üå™ Anxious</button>
            <button class="mood-btn">üò° Angry</button>
            <button class="mood-btn">üò¥ Tired</button>
            <button class="mood-btn">üéâ Celebratory</button>
        </div>
        <button class="post-btn">Add to SoulBoard</button>
    </div>

    <div id="feed">
        <div id="empty-state">
            ‚ú® Your soul's feed is empty...<br>
            Be the first to share your thoughts!
        </div>
    </div>

    <script>
        let entries = JSON.parse(localStorage.getItem('soulboardEntries')) || [];
        let vault = JSON.parse(localStorage.getItem('soulboardVault')) || {
            deleted: [],
            hidden: []
        };
        let currentPIN = null;
        let currentSection = 'deleted';

        // Vault Functions
        function toggleVault() {
            const vaultModal = document.getElementById('vaultModal');
            if (vaultModal.style.display === 'block') {
                closeVault();
            } else {
                showVault();
            }
        }

        function showVault() {
            const storedPIN = localStorage.getItem('soulboardPIN');
            if (storedPIN) {
                const enteredPIN = prompt("Enter your 4-digit PIN:");
                if (enteredPIN !== storedPIN) {
                    alert("Incorrect PIN");
                    return;
                }
            }
            document.getElementById('vaultModal').style.display = 'block';
            updateVaultDisplay();
        }

        function closeVault() {
            document.getElementById('vaultModal').style.display = 'none';
        }

        function showVaultSection(section) {
            currentSection = section;
            document.querySelectorAll('.vault-tab-btn').forEach(btn => {
                btn.classList.toggle('active', btn.textContent.includes(section));
            });
            updateVaultDisplay();
        }

        function updateVaultDisplay() {
            const contentDiv = document.getElementById('vaultContent');
            contentDiv.innerHTML = vault[currentSection].map((entry, index) => `
                <div class="vault-entry">
                    <div class="post-date">${new Date(entry.date).toLocaleDateString('en-US', { 
                        weekday: 'short', 
                        month: 'short', 
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    })}</div>
                    <div class="post-mood">${entry.mood}</div>
                    <div class="post-content">${entry.text}</div>
                    ${currentSection === 'deleted' ? `
                        <div class="vault-actions">
                            <button onclick="restoreEntry(${index}, 'deleted')">Restore</button>
                            <button onclick="permanentlyDelete(${index})">Delete Forever</button>
                        </div>
                    ` : `
                        <div class="vault-actions">
                            <button onclick="restoreEntry(${index}, 'hidden')">Unhide</button>
                        </div>
                    `}
                </div>
            `).join('');
        }

        // Entry Management
        function restoreEntry(index, section) {
            const entry = vault[section].splice(index, 1)[0];
            entries.unshift({...entry, date: Date.now()});
            saveAndRefresh();
        }

        function permanentlyDelete(index) {
            vault.deleted.splice(index, 1);
            saveAndRefresh();
        }

        function deletePost(index) {
            const entry = entries.splice(index, 1)[0];
            entry.deletedDate = Date.now();
            vault.deleted.push(entry);
            saveAndRefresh();
        }

        function hidePost(index) {
            const entry = entries.splice(index, 1)[0];
            vault.hidden.push(entry);
            saveAndRefresh();
        }

        function saveAndRefresh() {
            localStorage.setItem('soulboardEntries', JSON.stringify(entries));
            localStorage.setItem('soulboardVault', JSON.stringify(vault));
            refreshFeed();
            updateVaultDisplay();
        }

        // Feed Management
        function refreshFeed() {
            const feed = document.getElementById('feed');
            feed.innerHTML = '';
            entries.slice().reverse().forEach((entry, index) => {
                addPostToFeed(entry, index);
            });
            document.getElementById('empty-state').style.display = 
                entries.length ? 'none' : 'block';
        }

        function addPostToFeed(entry, index) {
            const post = document.createElement('div');
            post.className = 'post';
            post.innerHTML = `
                <div class="post-date">${new Date(entry.date).toLocaleDateString('en-US', { 
                    weekday: 'short', 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                })}</div>
                <div class="post-mood">${entry.mood}</div>
                <div class="post-content">${entry.text}</div>
            `;
            createPostMenu(post, index);
            document.getElementById('feed').prepend(post);
        }

        // Menu System
        function closeAllMenus() {
            document.querySelectorAll('.menu-options').forEach(menu => {
                menu.style.display = 'none';
            });
        }

        function createPostMenu(postElement, index) {
            const menu = document.createElement('div');
            menu.className = 'post-menu';
            menu.innerHTML = '‚ãØ';
            menu.onclick = (e) => {
                e.stopPropagation();
                closeAllMenus();
                const options = postElement.querySelector('.menu-options');
                options.style.display = options.style.display === 'block' ? 'none' : 'block';
            };

            const options = document.createElement('div');
            options.className = 'menu-options';
            options.innerHTML = `
                <div class="menu-option" onclick="deletePost(${index})">Delete</div>
                <div class="menu-option" onclick="hidePost(${index})">Hide</div>
            `;
            options.onclick = (e) => e.stopPropagation();
            postElement.appendChild(menu);
            postElement.appendChild(options);
        }

        // Event Listeners
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.menu-options') && !e.target.closest('.post-menu')) {
                closeAllMenus();
            }
        });

        window.onclick = function(event) {
            if (event.target.className === 'vault-modal') {
                closeVault();
            }
        }

        // Initialization
        if (!localStorage.getItem('soulboardPIN')) {
            const newPIN = prompt("Set a 4-digit PIN for vault access:");
            if (newPIN?.length === 4 && !isNaN(newPIN)) {
                localStorage.setItem('soulboardPIN', newPIN);
            }
        }

        refreshFeed();
    </script>
</body>
</html>
