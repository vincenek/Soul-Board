<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SoulBoard</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üå•Ô∏è</text></svg>">
    <style>
        :root {
            --primary: #8B93FF;
            --secondary: #FFA1F5;
            --background: #FAF9F6;
            --text: #333;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', sans-serif;
        }

        body {
            background-color: var(--background);
            color: var(--text);
            line-height: 1.6;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            margin: 2rem 0;
        }

        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

        h1::before {
            content: "üå•Ô∏è ";
        }

        .tagline {
            color: #666;
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
        }

        .new-post {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin-bottom: 2rem;
        }

        textarea {
            width: 100%;
            padding: 1rem;
            border: 2px solid #eee;
            border-radius: 8px;
            resize: vertical;
            min-height: 120px;
            margin-bottom: 1.5rem;
            font-size: 1rem;
        }

        .mood-selector {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 8px;
            margin-bottom: 1.5rem;
        }

        .mood-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 20px;
            background: #f0f0f0;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .mood-btn.selected {
            background: var(--primary);
            color: white;
        }

        .post-btn {
            background: var(--primary);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            width: 100%;
            font-size: 1rem;
        }

        .post {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            position: relative;
        }

        .post-date {
            color: #999;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .post-mood {
            font-size: 1.5rem;
            margin: 0.5rem 0;
        }

        .vault-access {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--primary);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .vault-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            max-width: 90%;
        }

        .menu-options {
            position: absolute;
            top: 2rem;
            right: 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 0.5rem;
            display: none;
        }
    </style>
</head>
<body>
    <div class="vault-access" onclick="toggleVault()">üîí Vault</div>
    <div class="vault-modal" id="vaultModal">
        <div id="vaultContent"></div>
    </div>

    <header>
        <h1>SoulBoard</h1>
        <p class="tagline">Where your soul speaks without judgment</p>
    </header>

    <div class="new-post">
        <textarea placeholder="What's on your mind today?" id="postContent"></textarea>
        <div class="mood-selector">
            <button class="mood-btn" data-mood="üòä Happy">üòä Happy</button>
            <button class="mood-btn" data-mood="üòê Meh">üòê Meh</button>
            <button class="mood-btn" data-mood="üò¢ Sad">üò¢ Sad</button>
            <button class="mood-btn" data-mood="üí° Inspired">üí° Inspired</button>
            <button class="mood-btn" data-mood="üå™ Anxious">üå™ Anxious</button>
            <button class="mood-btn" data-mood="üò° Angry">üò° Angry</button>
            <button class="mood-btn" data-mood="üò¥ Tired">üò¥ Tired</button>
            <button class="mood-btn" data-mood="üéâ Celebratory">üéâ Celebratory</button>
        </div>
        <button class="post-btn" id="submitPost">Add to SoulBoard</button>
    </div>

    <div id="feed"></div>

    <script>
        // Data Storage
        let entries = JSON.parse(localStorage.getItem('entries')) || [];
        let vault = JSON.parse(localStorage.getItem('vault')) || { deleted: [], hidden: [] };
        let selectedMood = null;

        // Mood Selection
        document.querySelectorAll('.mood-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.mood-btn').forEach(b => b.classList.remove('selected'));
                e.target.classList.add('selected');
                selectedMood = e.target.dataset.mood;
            });
        });

        // Post Creation
        document.getElementById('submitPost').addEventListener('click', () => {
            const content = document.getElementById('postContent').value.trim();
            
            if (!selectedMood) return alert('Select a mood!');
            if (!content) return alert('Write something!');
            
            const newPost = {
                id: Date.now(),
                date: new Date().toISOString(),
                mood: selectedMood,
                content: content
            };

            entries = [newPost, ...entries];
            updateStorage();
            renderPosts();
            document.getElementById('postContent').value = '';
            document.querySelector('.selected')?.classList.remove('selected');
        });

        // Vault System
        function toggleVault() {
            const modal = document.getElementById('vaultModal');
            modal.style.display = modal.style.display === 'block' ? 'none' : 'block';
            if (modal.style.display === 'block') renderVault();
        }

        function renderVault() {
            const vaultContent = document.getElementById('vaultContent');
            vaultContent.innerHTML = vault.deleted.map(entry => `
                <div class="post">
                    <div class="post-date">${new Date(entry.date).toLocaleString()}</div>
                    <div class="post-mood">${entry.mood}</div>
                    <div class="post-content">${entry.content}</div>
                    <button onclick="restorePost('${entry.id}')">Restore</button>
                </div>
            `).join('');
        }

        // Post Actions
        function deletePost(postId) {
            const post = entries.find(p => p.id === postId);
            vault.deleted.push(post);
            entries = entries.filter(p => p.id !== postId);
            updateStorage();
            renderPosts();
        }

        function restorePost(postId) {
            const post = vault.deleted.find(p => p.id === postId);
            entries = [post, ...entries];
            vault.deleted = vault.deleted.filter(p => p.id !== postId);
            updateStorage();
            renderPosts();
            renderVault();
        }

        // Rendering
        function renderPosts() {
            const feed = document.getElementById('feed');
            feed.innerHTML = entries.map(entry => `
                <div class="post">
                    <div class="post-date">${new Date(entry.date).toLocaleString()}</div>
                    <div class="post-mood">${entry.mood}</div>
                    <div class="post-content">${entry.content}</div>
                    <button onclick="deletePost('${entry.id}')">Delete</button>
                </div>
            `).join('');
        }

        function updateStorage() {
            localStorage.setItem('entries', JSON.stringify(entries));
            localStorage.setItem('vault', JSON.stringify(vault));
        }

        // Initial Load
        renderPosts();
    </script>
</body>
</html>
